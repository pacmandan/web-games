name: Web Games Deploy Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  DOCKER_REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_NAME }}/web-games
  DOCKER_IMAGE_NAME: server

jobs:
  test-server:
    name: Build and test server
    runs-on: ubuntu-22.04

    env:
      MIX_ENV: test

    strategy:
      matrix:
        otp: ['26.2.1']
        elixir: ['1.16.0']

    steps:
    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{ matrix.otp }}
        elixir-version: ${{ matrix.elixir }}
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Cache deps
      uses: actions/cache@v3
      id: cache-deps
      env:
        cache-name: cache-elixir-deps
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-
    - name: Cache compiled build
      id: cache-build
      uses: actions/cache@v3
      env:
        cache-name: cache-compiled-build
      with:
        path: _build
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-
          ${{ runner.os }}-mix-
    - name: Clean to rule out incremental build as a source of flakiness
      if: github.run_attempt != '1'
      run: |
        mix deps.clean --all
        mix clean
      shell: sh
    - name: Install deps
      run: mix deps.get
    - name: Compile
      run: mix compile --warnings-as-errors
    - name: Run tests
      run: mix test

  docker:
    name: Build Docker Image
    runs-on: ubuntu-22.04

    needs: [test-server]

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Docker meta
      uses: docker/metadata-action@v4
      id: meta
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=sha
    - id: auth
      name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v1
      with:
        token_format: access_token
        workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
        service_account: '${{ secrets.WIF_DOCKER_SERVICE_ACCOUNT }}'
        access_token_lifetime: 300s
    - name: Login to Artifact Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}
    - name: Build and push container
      uses: docker/build-push-action@v2
      with:
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}

  deploy-service:
    if: github.event_name != 'pull_request'
    name: Deploy service
    runs-on: ubuntu-22.04
    needs: [docker]
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - id: auth
      name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v1
      with:
        token_format: access_token
        workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
        service_account: '${{ secrets.WIF_DEPLOYER_SERVICE_ACCOUNT }}'
        access_token_lifetime: 300s
    - name: Set up gcloud
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_NAME }}
    - name: Get short-sha
      id: sha
      run: echo "short_sha=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_OUTPUT

    # TODO: Should this section be its own stage? If so, if it doesn't fire,
    # can it still be required by the next stage?
    # - name: Checkout code
    #   uses: actions/checkout@v3
    # - uses: dorny/paths-filter@v2
    #   id: changes
    #   with:
    #     filters: |
    #       otelconf:
    #         - 'otelconf/prod/**'
    # - name: Update OTEL Config
    #   if: steps.changes.outputs.otelconf == 'true'
    #   run: |-
    #     gcloud secrets versions add ${{ secrets.OTEL_SECRET_NAME }} --data-file=./otelconf/prod/otel-collector-config.yaml

    # - name: Download service YAML
    #   run: |-
    #     gcloud run services describe web-games --region ${{ secrets.GCP_REGION }} --format export > service.yaml
    # - name: Update the server image
    #   uses: mikefarah/yq@master
    #   with:
    #     cmd: yq -i '(.spec.template.spec.containers[] | select(.name == "server")).image = "${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:sha-${{ steps.sha.outputs.short_sha }}"' service.yaml
    - name: Update service
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: web-games
        image: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:sha-${{ steps.sha.outputs.short_sha }}
        # metadata: service.yaml
